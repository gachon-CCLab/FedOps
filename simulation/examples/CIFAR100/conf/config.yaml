---

num_clients: 5 # total number of clients
num_epochs: 2 # number of local epochs
batch_size: 128
num_rounds: 2 # Number of rounds to perform
clients_per_round: 5 # number of participating clients
learning_rate: 0.001 # Input model's learning rates

random_seed: 42

# Define your dataset
dataset:
    name: 'MNIST' # Input your data name
    validation_split: 0.2 # Ratio of dividing train data by validation


# set client resource 
client_resources:
  num_cpus: 4
  num_gpus: 0

# set client resource 
server_device: cpu #  or cuda (if you have)


# Your custom model
model:
  _target_: models.CIFAR100Classifier # set model class
  output_size: 100 # set model output_size


# FL Server Aggregation
strategy:
  _target_: fedops.simulation.fl_strategy.aggregation.CustomSelection 
  fraction_fit: 0.00001 # because we want the number of clients to sample on each round to be solely defined by min_fit_clients
  fraction_evaluate: 0.000001 # because we want the number of clients to sample on each round to be solely defined by min_evaluate_clients
  min_fit_clients: ${clients_per_round} # Minimum number of clients to participate in training
  min_available_clients: ${clients_per_round} # Minimum number of clients to participate in a round
  min_evaluate_clients: ${clients_per_round} # Minimum number of clients to participate in evaluation
  evaluate_metrics_aggregation_fn:
    _target_: fedops.simulation.fl_strategy.aggregation.weighted_average
    _partial_: true # we dont' want this function to be evaluated when instantiating the strategy, we treat it as a partial and evaluate it when the strategy actually calls the function (in aggregate_evaluate())

  # Client Selection
  selection_use: true # Whether to use Selection Algorithm
  selection_ratio: 0.5 # Select what % of clients
  metric: 'loss' # Select clients based on performance criteria such as loss/acc/auc
  standard: 'max' # Based on highest/lowest


# Monitor global model performance
wandb: 
  use: true # Whether to use wandb
  key: 'your wandb api key' # Input your wandb api key
  account: 'your wandb account' # Input your wandb account
  project: '${dataset.name}_${task_id}'
