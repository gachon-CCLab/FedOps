// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: AudioFeaturePrint.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021, Apple Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-3-clause license that can be
// found in LICENSE.txt or at https://opensource.org/licenses/BSD-3-Clause

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A model which takes an input audio and outputs array(s) of features
/// according to the specified feature types
struct CoreML_Specification_CoreMLModels_AudioFeaturePrint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Audio feature print type
  var audioFeaturePrintType: CoreML_Specification_CoreMLModels_AudioFeaturePrint.OneOf_AudioFeaturePrintType? = nil

  var sound: CoreML_Specification_CoreMLModels_AudioFeaturePrint.Sound {
    get {
      if case .sound(let v)? = audioFeaturePrintType {return v}
      return CoreML_Specification_CoreMLModels_AudioFeaturePrint.Sound()
    }
    set {audioFeaturePrintType = .sound(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Audio feature print type
  enum OneOf_AudioFeaturePrintType: Equatable {
    case sound(CoreML_Specification_CoreMLModels_AudioFeaturePrint.Sound)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_CoreMLModels_AudioFeaturePrint.OneOf_AudioFeaturePrintType, rhs: CoreML_Specification_CoreMLModels_AudioFeaturePrint.OneOf_AudioFeaturePrintType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.sound, .sound): return {
        guard case .sound(let l) = lhs, case .sound(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  /// Sound extracts features useful for identifying the predominant
  /// sound in audio signal
  struct Sound {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var version: CoreML_Specification_CoreMLModels_AudioFeaturePrint.Sound.SoundVersion = .invalid

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum SoundVersion: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case invalid // = 0

      /// VERSION_1 is available on iOS,tvOS 15.0+, macOS 12.0+
      /// It uses a variable-length input audio sample vector and yields a 512 float feature vector
      case soundVersion1 // = 1
      case UNRECOGNIZED(Int)

      init() {
        self = .invalid
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .invalid
        case 1: self = .soundVersion1
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .invalid: return 0
        case .soundVersion1: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}
  }

  init() {}
}

#if swift(>=4.2)

extension CoreML_Specification_CoreMLModels_AudioFeaturePrint.Sound.SoundVersion: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CoreML_Specification_CoreMLModels_AudioFeaturePrint.Sound.SoundVersion] = [
    .invalid,
    .soundVersion1,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CoreML.Specification.CoreMLModels"

extension CoreML_Specification_CoreMLModels_AudioFeaturePrint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AudioFeaturePrint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    20: .same(proto: "sound"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 20: try {
        var v: CoreML_Specification_CoreMLModels_AudioFeaturePrint.Sound?
        var hadOneofValue = false
        if let current = self.audioFeaturePrintType {
          hadOneofValue = true
          if case .sound(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.audioFeaturePrintType = .sound(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .sound(let v)? = self.audioFeaturePrintType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_CoreMLModels_AudioFeaturePrint, rhs: CoreML_Specification_CoreMLModels_AudioFeaturePrint) -> Bool {
    if lhs.audioFeaturePrintType != rhs.audioFeaturePrintType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_CoreMLModels_AudioFeaturePrint.Sound: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = CoreML_Specification_CoreMLModels_AudioFeaturePrint.protoMessageName + ".Sound"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != .invalid {
      try visitor.visitSingularEnumField(value: self.version, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_CoreMLModels_AudioFeaturePrint.Sound, rhs: CoreML_Specification_CoreMLModels_AudioFeaturePrint.Sound) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_CoreMLModels_AudioFeaturePrint.Sound.SoundVersion: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOUND_VERSION_INVALID"),
    1: .same(proto: "SOUND_VERSION_1"),
  ]
}
